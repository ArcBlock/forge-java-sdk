buildscript{
  if (System.getenv("SONATYPE_USERNAME") != null){
    ext."sonatypeUsername" = System.getenv("SONATYPE_USERNAME")
    ext."sonatypePassword" = System.getenv("SONATYPE_PASSWORD")
  }
  if(project.findProperty("sonatypeUsername") == null){
    ext.sonatypeUsername = ""
    ext.sonatypePassword = ""
  }
}
allprojects {
  buildscript {
    ext.kotlin_version = '1.3.31'
    repositories {
      mavenCentral()
      jcenter()
    }
    dependencies {
      classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
      classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.10'
      classpath 'com.squareup:javapoet:1.11.1'
      classpath 'de.undercouch:gradle-download-task:3.4.3'
      classpath 'com.github.jengelman.gradle.plugins:shadow:5.1.0'
    }
  }
  repositories {
    mavenCentral()
    jcenter()
  }
  apply plugin: 'signing'
  apply plugin: 'jacoco'
  apply plugin: 'maven-publish'
  apply plugin: 'java-library'





  gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
      // Use Java's console to read from the console (no good for
      // a CI environment)
      if(System.getenv('GPG_KEY_ID') != null){
        def id = System.getenv('GPG_KEY_ID')
        def file = "../secring.gpg"
        def password = System.getenv('GPG_KEY_PASSPHRASE')

        allprojects {
          ext."signing.keyId" = id
          ext."signing.secretKeyRingFile" = file
          ext."signing.password" = password

          ext.sonatypeUsername = System.getenv("SONATYPE_USERNAME")
          ext.sonatypePassword = System.getenv("SONATYPE_PASSWORD")
        }
      }


    }
  }


}
apply plugin: 'signing'




group 'io.arcblock.forge'
version project.file("version").readLines().first()












