// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enum.proto

package forge_abi;

public final class Enum {
  private Enum() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code forge_abi.StatusCode}
   */
  public enum StatusCode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ok = 0;</code>
     */
    ok(0),
    /**
     * <pre>
     * common code
     * 1 - 15
     * </pre>
     *
     * <code>invalid_nonce = 1;</code>
     */
    invalid_nonce(1),
    /**
     * <code>invalid_signature = 2;</code>
     */
    invalid_signature(2),
    /**
     * <code>invalid_sender_state = 3;</code>
     */
    invalid_sender_state(3),
    /**
     * <code>invalid_receiver_state = 4;</code>
     */
    invalid_receiver_state(4),
    /**
     * <code>insufficient_data = 5;</code>
     */
    insufficient_data(5),
    /**
     * <code>insufficient_fund = 6;</code>
     */
    insufficient_fund(6),
    /**
     * <code>invalid_owner = 7;</code>
     */
    invalid_owner(7),
    /**
     * <code>invalid_tx = 8;</code>
     */
    invalid_tx(8),
    /**
     * <code>unsupported_tx = 9;</code>
     */
    unsupported_tx(9),
    /**
     * <code>expired_tx = 10;</code>
     */
    expired_tx(10),
    /**
     * <code>too_many_txs = 11;</code>
     */
    too_many_txs(11),
    /**
     * <code>invalid_lock_status = 12;</code>
     */
    invalid_lock_status(12),
    /**
     * <code>invalid_request = 13;</code>
     */
    invalid_request(13),
    /**
     * <pre>
     * 16 - 2047 various errors
     * </pre>
     *
     * <code>invalid_moniker = 16;</code>
     */
    invalid_moniker(16),
    /**
     * <code>invalid_passphrase = 17;</code>
     */
    invalid_passphrase(17),
    /**
     * <code>invalid_multisig = 20;</code>
     */
    invalid_multisig(20),
    /**
     * <code>invalid_wallet = 21;</code>
     */
    invalid_wallet(21),
    /**
     * <code>invalid_chain_id = 22;</code>
     */
    invalid_chain_id(22),
    /**
     * <code>consensus_rpc_error = 24;</code>
     */
    consensus_rpc_error(24),
    /**
     * <code>storage_rpc_error = 25;</code>
     */
    storage_rpc_error(25),
    /**
     * <code>noent = 26;</code>
     */
    noent(26),
    /**
     * <code>account_migrated = 27;</code>
     */
    account_migrated(27),
    /**
     * <code>unsupported_stake = 30;</code>
     */
    unsupported_stake(30),
    /**
     * <code>insufficient_stake = 31;</code>
     */
    insufficient_stake(31),
    /**
     * <code>invalid_stake_state = 32;</code>
     */
    invalid_stake_state(32),
    /**
     * <code>expired_wallet_token = 33;</code>
     */
    expired_wallet_token(33),
    /**
     * <code>banned_unstake = 34;</code>
     */
    banned_unstake(34),
    /**
     * <code>invalid_asset = 35;</code>
     */
    invalid_asset(35),
    /**
     * <code>invalid_tx_size = 36;</code>
     */
    invalid_tx_size(36),
    /**
     * <code>invalid_signer_state = 37;</code>
     */
    invalid_signer_state(37),
    /**
     * <code>invalid_forge_state = 38;</code>
     */
    invalid_forge_state(38),
    /**
     * <code>expired_asset = 39;</code>
     */
    expired_asset(39),
    /**
     * <code>untransferrable_asset = 40;</code>
     */
    untransferrable_asset(40),
    /**
     * <code>readonly_asset = 41;</code>
     */
    readonly_asset(41),
    /**
     * <code>consumed_asset = 42;</code>
     */
    consumed_asset(42),
    /**
     * <code>invalid_deposit_value = 43;</code>
     */
    invalid_deposit_value(43),
    /**
     * <code>exceed_deposit_cap = 44;</code>
     */
    exceed_deposit_cap(44),
    /**
     * <code>invalid_deposit_target = 45;</code>
     */
    invalid_deposit_target(45),
    /**
     * <code>invalid_depositor = 46;</code>
     */
    invalid_depositor(46),
    /**
     * <code>invalid_withdrawer = 47;</code>
     */
    invalid_withdrawer(47),
    /**
     * <code>duplicate_tether = 48;</code>
     */
    duplicate_tether(48),
    /**
     * <code>invalid_expiry_date = 49;</code>
     */
    invalid_expiry_date(49),
    /**
     * <code>invalid_deposit = 50;</code>
     */
    invalid_deposit(50),
    /**
     * <code>invalid_custodian = 51;</code>
     */
    invalid_custodian(51),
    /**
     * <code>forbidden = 403;</code>
     */
    forbidden(403),
    /**
     * <code>internal = 500;</code>
     */
    internal(500),
    /**
     * <code>timeout = 504;</code>
     */
    timeout(504),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>ok = 0;</code>
     */
    public static final int ok_VALUE = 0;
    /**
     * <pre>
     * common code
     * 1 - 15
     * </pre>
     *
     * <code>invalid_nonce = 1;</code>
     */
    public static final int invalid_nonce_VALUE = 1;
    /**
     * <code>invalid_signature = 2;</code>
     */
    public static final int invalid_signature_VALUE = 2;
    /**
     * <code>invalid_sender_state = 3;</code>
     */
    public static final int invalid_sender_state_VALUE = 3;
    /**
     * <code>invalid_receiver_state = 4;</code>
     */
    public static final int invalid_receiver_state_VALUE = 4;
    /**
     * <code>insufficient_data = 5;</code>
     */
    public static final int insufficient_data_VALUE = 5;
    /**
     * <code>insufficient_fund = 6;</code>
     */
    public static final int insufficient_fund_VALUE = 6;
    /**
     * <code>invalid_owner = 7;</code>
     */
    public static final int invalid_owner_VALUE = 7;
    /**
     * <code>invalid_tx = 8;</code>
     */
    public static final int invalid_tx_VALUE = 8;
    /**
     * <code>unsupported_tx = 9;</code>
     */
    public static final int unsupported_tx_VALUE = 9;
    /**
     * <code>expired_tx = 10;</code>
     */
    public static final int expired_tx_VALUE = 10;
    /**
     * <code>too_many_txs = 11;</code>
     */
    public static final int too_many_txs_VALUE = 11;
    /**
     * <code>invalid_lock_status = 12;</code>
     */
    public static final int invalid_lock_status_VALUE = 12;
    /**
     * <code>invalid_request = 13;</code>
     */
    public static final int invalid_request_VALUE = 13;
    /**
     * <pre>
     * 16 - 2047 various errors
     * </pre>
     *
     * <code>invalid_moniker = 16;</code>
     */
    public static final int invalid_moniker_VALUE = 16;
    /**
     * <code>invalid_passphrase = 17;</code>
     */
    public static final int invalid_passphrase_VALUE = 17;
    /**
     * <code>invalid_multisig = 20;</code>
     */
    public static final int invalid_multisig_VALUE = 20;
    /**
     * <code>invalid_wallet = 21;</code>
     */
    public static final int invalid_wallet_VALUE = 21;
    /**
     * <code>invalid_chain_id = 22;</code>
     */
    public static final int invalid_chain_id_VALUE = 22;
    /**
     * <code>consensus_rpc_error = 24;</code>
     */
    public static final int consensus_rpc_error_VALUE = 24;
    /**
     * <code>storage_rpc_error = 25;</code>
     */
    public static final int storage_rpc_error_VALUE = 25;
    /**
     * <code>noent = 26;</code>
     */
    public static final int noent_VALUE = 26;
    /**
     * <code>account_migrated = 27;</code>
     */
    public static final int account_migrated_VALUE = 27;
    /**
     * <code>unsupported_stake = 30;</code>
     */
    public static final int unsupported_stake_VALUE = 30;
    /**
     * <code>insufficient_stake = 31;</code>
     */
    public static final int insufficient_stake_VALUE = 31;
    /**
     * <code>invalid_stake_state = 32;</code>
     */
    public static final int invalid_stake_state_VALUE = 32;
    /**
     * <code>expired_wallet_token = 33;</code>
     */
    public static final int expired_wallet_token_VALUE = 33;
    /**
     * <code>banned_unstake = 34;</code>
     */
    public static final int banned_unstake_VALUE = 34;
    /**
     * <code>invalid_asset = 35;</code>
     */
    public static final int invalid_asset_VALUE = 35;
    /**
     * <code>invalid_tx_size = 36;</code>
     */
    public static final int invalid_tx_size_VALUE = 36;
    /**
     * <code>invalid_signer_state = 37;</code>
     */
    public static final int invalid_signer_state_VALUE = 37;
    /**
     * <code>invalid_forge_state = 38;</code>
     */
    public static final int invalid_forge_state_VALUE = 38;
    /**
     * <code>expired_asset = 39;</code>
     */
    public static final int expired_asset_VALUE = 39;
    /**
     * <code>untransferrable_asset = 40;</code>
     */
    public static final int untransferrable_asset_VALUE = 40;
    /**
     * <code>readonly_asset = 41;</code>
     */
    public static final int readonly_asset_VALUE = 41;
    /**
     * <code>consumed_asset = 42;</code>
     */
    public static final int consumed_asset_VALUE = 42;
    /**
     * <code>invalid_deposit_value = 43;</code>
     */
    public static final int invalid_deposit_value_VALUE = 43;
    /**
     * <code>exceed_deposit_cap = 44;</code>
     */
    public static final int exceed_deposit_cap_VALUE = 44;
    /**
     * <code>invalid_deposit_target = 45;</code>
     */
    public static final int invalid_deposit_target_VALUE = 45;
    /**
     * <code>invalid_depositor = 46;</code>
     */
    public static final int invalid_depositor_VALUE = 46;
    /**
     * <code>invalid_withdrawer = 47;</code>
     */
    public static final int invalid_withdrawer_VALUE = 47;
    /**
     * <code>duplicate_tether = 48;</code>
     */
    public static final int duplicate_tether_VALUE = 48;
    /**
     * <code>invalid_expiry_date = 49;</code>
     */
    public static final int invalid_expiry_date_VALUE = 49;
    /**
     * <code>invalid_deposit = 50;</code>
     */
    public static final int invalid_deposit_VALUE = 50;
    /**
     * <code>invalid_custodian = 51;</code>
     */
    public static final int invalid_custodian_VALUE = 51;
    /**
     * <code>forbidden = 403;</code>
     */
    public static final int forbidden_VALUE = 403;
    /**
     * <code>internal = 500;</code>
     */
    public static final int internal_VALUE = 500;
    /**
     * <code>timeout = 504;</code>
     */
    public static final int timeout_VALUE = 504;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static StatusCode valueOf(int value) {
      return forNumber(value);
    }

    public static StatusCode forNumber(int value) {
      switch (value) {
        case 0: return ok;
        case 1: return invalid_nonce;
        case 2: return invalid_signature;
        case 3: return invalid_sender_state;
        case 4: return invalid_receiver_state;
        case 5: return insufficient_data;
        case 6: return insufficient_fund;
        case 7: return invalid_owner;
        case 8: return invalid_tx;
        case 9: return unsupported_tx;
        case 10: return expired_tx;
        case 11: return too_many_txs;
        case 12: return invalid_lock_status;
        case 13: return invalid_request;
        case 16: return invalid_moniker;
        case 17: return invalid_passphrase;
        case 20: return invalid_multisig;
        case 21: return invalid_wallet;
        case 22: return invalid_chain_id;
        case 24: return consensus_rpc_error;
        case 25: return storage_rpc_error;
        case 26: return noent;
        case 27: return account_migrated;
        case 30: return unsupported_stake;
        case 31: return insufficient_stake;
        case 32: return invalid_stake_state;
        case 33: return expired_wallet_token;
        case 34: return banned_unstake;
        case 35: return invalid_asset;
        case 36: return invalid_tx_size;
        case 37: return invalid_signer_state;
        case 38: return invalid_forge_state;
        case 39: return expired_asset;
        case 40: return untransferrable_asset;
        case 41: return readonly_asset;
        case 42: return consumed_asset;
        case 43: return invalid_deposit_value;
        case 44: return exceed_deposit_cap;
        case 45: return invalid_deposit_target;
        case 46: return invalid_depositor;
        case 47: return invalid_withdrawer;
        case 48: return duplicate_tether;
        case 49: return invalid_expiry_date;
        case 50: return invalid_deposit;
        case 51: return invalid_custodian;
        case 403: return forbidden;
        case 500: return internal;
        case 504: return timeout;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<StatusCode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        StatusCode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<StatusCode>() {
            public StatusCode findValueByNumber(int number) {
              return StatusCode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return forge_abi.Enum.getDescriptor().getEnumTypes().get(0);
    }

    private static final StatusCode[] VALUES = values();

    public static StatusCode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private StatusCode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:forge_abi.StatusCode)
  }

  /**
   * <pre>
   * event happened on Forge powered chain
   * </pre>
   *
   * Protobuf enum {@code forge_abi.TopicType}
   */
  public enum TopicType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * most commonly used event
     * </pre>
     *
     * <code>transfer = 0;</code>
     */
    transfer(0),
    /**
     * <pre>
     * 1-15 fequently used event
     * </pre>
     *
     * <code>exchange = 1;</code>
     */
    exchange(1),
    /**
     * <code>declare = 2;</code>
     */
    declare(2),
    /**
     * <code>create_asset = 3;</code>
     */
    create_asset(3),
    /**
     * <code>update_asset = 4;</code>
     */
    update_asset(4),
    /**
     * <code>stake = 5;</code>
     */
    stake(5),
    /**
     * <code>account_migrate = 6;</code>
     */
    account_migrate(6),
    /**
     * <pre>
     * 16-2047 infrequently used event
     * </pre>
     *
     * <code>begin_block = 16;</code>
     */
    begin_block(16),
    /**
     * <code>end_block = 17;</code>
     */
    end_block(17),
    /**
     * <code>consensus_upgrade = 21;</code>
     */
    consensus_upgrade(21),
    /**
     * <code>declare_file = 22;</code>
     */
    declare_file(22),
    /**
     * <code>sys_upgrade = 23;</code>
     */
    sys_upgrade(23),
    /**
     * <code>application = 24;</code>
     */
    application(24),
    /**
     * <code>consume_asset = 25;</code>
     */
    consume_asset(25),
    /**
     * <code>poke = 26;</code>
     */
    poke(26),
    /**
     * <code>account_state = 129;</code>
     */
    account_state(129),
    /**
     * <code>asset_state = 130;</code>
     */
    asset_state(130),
    /**
     * <code>forge_state = 131;</code>
     */
    forge_state(131),
    /**
     * <code>stake_state = 132;</code>
     */
    stake_state(132),
    /**
     * <code>protocol_state = 133;</code>
     */
    protocol_state(133),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * most commonly used event
     * </pre>
     *
     * <code>transfer = 0;</code>
     */
    public static final int transfer_VALUE = 0;
    /**
     * <pre>
     * 1-15 fequently used event
     * </pre>
     *
     * <code>exchange = 1;</code>
     */
    public static final int exchange_VALUE = 1;
    /**
     * <code>declare = 2;</code>
     */
    public static final int declare_VALUE = 2;
    /**
     * <code>create_asset = 3;</code>
     */
    public static final int create_asset_VALUE = 3;
    /**
     * <code>update_asset = 4;</code>
     */
    public static final int update_asset_VALUE = 4;
    /**
     * <code>stake = 5;</code>
     */
    public static final int stake_VALUE = 5;
    /**
     * <code>account_migrate = 6;</code>
     */
    public static final int account_migrate_VALUE = 6;
    /**
     * <pre>
     * 16-2047 infrequently used event
     * </pre>
     *
     * <code>begin_block = 16;</code>
     */
    public static final int begin_block_VALUE = 16;
    /**
     * <code>end_block = 17;</code>
     */
    public static final int end_block_VALUE = 17;
    /**
     * <code>consensus_upgrade = 21;</code>
     */
    public static final int consensus_upgrade_VALUE = 21;
    /**
     * <code>declare_file = 22;</code>
     */
    public static final int declare_file_VALUE = 22;
    /**
     * <code>sys_upgrade = 23;</code>
     */
    public static final int sys_upgrade_VALUE = 23;
    /**
     * <code>application = 24;</code>
     */
    public static final int application_VALUE = 24;
    /**
     * <code>consume_asset = 25;</code>
     */
    public static final int consume_asset_VALUE = 25;
    /**
     * <code>poke = 26;</code>
     */
    public static final int poke_VALUE = 26;
    /**
     * <code>account_state = 129;</code>
     */
    public static final int account_state_VALUE = 129;
    /**
     * <code>asset_state = 130;</code>
     */
    public static final int asset_state_VALUE = 130;
    /**
     * <code>forge_state = 131;</code>
     */
    public static final int forge_state_VALUE = 131;
    /**
     * <code>stake_state = 132;</code>
     */
    public static final int stake_state_VALUE = 132;
    /**
     * <code>protocol_state = 133;</code>
     */
    public static final int protocol_state_VALUE = 133;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TopicType valueOf(int value) {
      return forNumber(value);
    }

    public static TopicType forNumber(int value) {
      switch (value) {
        case 0: return transfer;
        case 1: return exchange;
        case 2: return declare;
        case 3: return create_asset;
        case 4: return update_asset;
        case 5: return stake;
        case 6: return account_migrate;
        case 16: return begin_block;
        case 17: return end_block;
        case 21: return consensus_upgrade;
        case 22: return declare_file;
        case 23: return sys_upgrade;
        case 24: return application;
        case 25: return consume_asset;
        case 26: return poke;
        case 129: return account_state;
        case 130: return asset_state;
        case 131: return forge_state;
        case 132: return stake_state;
        case 133: return protocol_state;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TopicType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TopicType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TopicType>() {
            public TopicType findValueByNumber(int number) {
              return TopicType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return forge_abi.Enum.getDescriptor().getEnumTypes().get(1);
    }

    private static final TopicType[] VALUES = values();

    public static TopicType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TopicType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:forge_abi.TopicType)
  }

  /**
   * Protobuf enum {@code forge_abi.KeyType}
   */
  public enum KeyType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ed25519 = 0;</code>
     */
    ed25519(0),
    /**
     * <code>secp256k1 = 1;</code>
     */
    secp256k1(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>ed25519 = 0;</code>
     */
    public static final int ed25519_VALUE = 0;
    /**
     * <code>secp256k1 = 1;</code>
     */
    public static final int secp256k1_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static KeyType valueOf(int value) {
      return forNumber(value);
    }

    public static KeyType forNumber(int value) {
      switch (value) {
        case 0: return ed25519;
        case 1: return secp256k1;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<KeyType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        KeyType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<KeyType>() {
            public KeyType findValueByNumber(int number) {
              return KeyType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return forge_abi.Enum.getDescriptor().getEnumTypes().get(2);
    }

    private static final KeyType[] VALUES = values();

    public static KeyType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private KeyType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:forge_abi.KeyType)
  }

  /**
   * Protobuf enum {@code forge_abi.HashType}
   */
  public enum HashType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>keccak = 0;</code>
     */
    keccak(0),
    /**
     * <code>sha3 = 1;</code>
     */
    sha3(1),
    /**
     * <code>sha2 = 2;</code>
     */
    sha2(2),
    /**
     * <code>keccak_384 = 6;</code>
     */
    keccak_384(6),
    /**
     * <code>sha3_384 = 7;</code>
     */
    sha3_384(7),
    /**
     * <code>keccak_512 = 13;</code>
     */
    keccak_512(13),
    /**
     * <code>sha3_512 = 14;</code>
     */
    sha3_512(14),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>keccak = 0;</code>
     */
    public static final int keccak_VALUE = 0;
    /**
     * <code>sha3 = 1;</code>
     */
    public static final int sha3_VALUE = 1;
    /**
     * <code>sha2 = 2;</code>
     */
    public static final int sha2_VALUE = 2;
    /**
     * <code>keccak_384 = 6;</code>
     */
    public static final int keccak_384_VALUE = 6;
    /**
     * <code>sha3_384 = 7;</code>
     */
    public static final int sha3_384_VALUE = 7;
    /**
     * <code>keccak_512 = 13;</code>
     */
    public static final int keccak_512_VALUE = 13;
    /**
     * <code>sha3_512 = 14;</code>
     */
    public static final int sha3_512_VALUE = 14;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static HashType valueOf(int value) {
      return forNumber(value);
    }

    public static HashType forNumber(int value) {
      switch (value) {
        case 0: return keccak;
        case 1: return sha3;
        case 2: return sha2;
        case 6: return keccak_384;
        case 7: return sha3_384;
        case 13: return keccak_512;
        case 14: return sha3_512;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<HashType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        HashType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<HashType>() {
            public HashType findValueByNumber(int number) {
              return HashType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return forge_abi.Enum.getDescriptor().getEnumTypes().get(3);
    }

    private static final HashType[] VALUES = values();

    public static HashType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private HashType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:forge_abi.HashType)
  }

  /**
   * Protobuf enum {@code forge_abi.EncodingType}
   */
  public enum EncodingType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>base16 = 0;</code>
     */
    base16(0),
    /**
     * <code>base58 = 1;</code>
     */
    base58(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>base16 = 0;</code>
     */
    public static final int base16_VALUE = 0;
    /**
     * <code>base58 = 1;</code>
     */
    public static final int base58_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EncodingType valueOf(int value) {
      return forNumber(value);
    }

    public static EncodingType forNumber(int value) {
      switch (value) {
        case 0: return base16;
        case 1: return base58;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EncodingType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EncodingType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EncodingType>() {
            public EncodingType findValueByNumber(int number) {
              return EncodingType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return forge_abi.Enum.getDescriptor().getEnumTypes().get(4);
    }

    private static final EncodingType[] VALUES = values();

    public static EncodingType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EncodingType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:forge_abi.EncodingType)
  }

  /**
   * Protobuf enum {@code forge_abi.RoleType}
   */
  public enum RoleType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>role_account = 0;</code>
     */
    role_account(0),
    /**
     * <code>role_node = 1;</code>
     */
    role_node(1),
    /**
     * <code>role_device = 2;</code>
     */
    role_device(2),
    /**
     * <code>role_application = 3;</code>
     */
    role_application(3),
    /**
     * <code>role_smart_contract = 4;</code>
     */
    role_smart_contract(4),
    /**
     * <code>role_bot = 5;</code>
     */
    role_bot(5),
    /**
     * <code>role_asset = 6;</code>
     */
    role_asset(6),
    /**
     * <code>role_stake = 7;</code>
     */
    role_stake(7),
    /**
     * <code>role_validator = 8;</code>
     */
    role_validator(8),
    /**
     * <code>role_group = 9;</code>
     */
    role_group(9),
    /**
     * <code>role_tx = 10;</code>
     */
    role_tx(10),
    /**
     * <code>role_tether = 11;</code>
     */
    role_tether(11),
    /**
     * <code>role_any = 63;</code>
     */
    role_any(63),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>role_account = 0;</code>
     */
    public static final int role_account_VALUE = 0;
    /**
     * <code>role_node = 1;</code>
     */
    public static final int role_node_VALUE = 1;
    /**
     * <code>role_device = 2;</code>
     */
    public static final int role_device_VALUE = 2;
    /**
     * <code>role_application = 3;</code>
     */
    public static final int role_application_VALUE = 3;
    /**
     * <code>role_smart_contract = 4;</code>
     */
    public static final int role_smart_contract_VALUE = 4;
    /**
     * <code>role_bot = 5;</code>
     */
    public static final int role_bot_VALUE = 5;
    /**
     * <code>role_asset = 6;</code>
     */
    public static final int role_asset_VALUE = 6;
    /**
     * <code>role_stake = 7;</code>
     */
    public static final int role_stake_VALUE = 7;
    /**
     * <code>role_validator = 8;</code>
     */
    public static final int role_validator_VALUE = 8;
    /**
     * <code>role_group = 9;</code>
     */
    public static final int role_group_VALUE = 9;
    /**
     * <code>role_tx = 10;</code>
     */
    public static final int role_tx_VALUE = 10;
    /**
     * <code>role_tether = 11;</code>
     */
    public static final int role_tether_VALUE = 11;
    /**
     * <code>role_any = 63;</code>
     */
    public static final int role_any_VALUE = 63;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static RoleType valueOf(int value) {
      return forNumber(value);
    }

    public static RoleType forNumber(int value) {
      switch (value) {
        case 0: return role_account;
        case 1: return role_node;
        case 2: return role_device;
        case 3: return role_application;
        case 4: return role_smart_contract;
        case 5: return role_bot;
        case 6: return role_asset;
        case 7: return role_stake;
        case 8: return role_validator;
        case 9: return role_group;
        case 10: return role_tx;
        case 11: return role_tether;
        case 63: return role_any;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<RoleType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        RoleType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<RoleType>() {
            public RoleType findValueByNumber(int number) {
              return RoleType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return forge_abi.Enum.getDescriptor().getEnumTypes().get(5);
    }

    private static final RoleType[] VALUES = values();

    public static RoleType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private RoleType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:forge_abi.RoleType)
  }

  /**
   * Protobuf enum {@code forge_abi.UpgradeType}
   */
  public enum UpgradeType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * configuration
     * </pre>
     *
     * <code>config_app = 0;</code>
     */
    config_app(0),
    /**
     * <code>config_forge = 1;</code>
     */
    config_forge(1),
    /**
     * <code>config_dfs = 2;</code>
     */
    config_dfs(2),
    /**
     * <code>config_consensus = 3;</code>
     */
    config_consensus(3),
    /**
     * <code>config_p2p = 4;</code>
     */
    config_p2p(4),
    /**
     * <pre>
     * executable
     * </pre>
     *
     * <code>exe_app = 10;</code>
     */
    exe_app(10),
    /**
     * <code>exe_forge = 11;</code>
     */
    exe_forge(11),
    /**
     * <code>exe_dfs = 12;</code>
     */
    exe_dfs(12),
    /**
     * <code>exe_consensus = 13;</code>
     */
    exe_consensus(13),
    /**
     * <code>exe_p2p = 14;</code>
     */
    exe_p2p(14),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * configuration
     * </pre>
     *
     * <code>config_app = 0;</code>
     */
    public static final int config_app_VALUE = 0;
    /**
     * <code>config_forge = 1;</code>
     */
    public static final int config_forge_VALUE = 1;
    /**
     * <code>config_dfs = 2;</code>
     */
    public static final int config_dfs_VALUE = 2;
    /**
     * <code>config_consensus = 3;</code>
     */
    public static final int config_consensus_VALUE = 3;
    /**
     * <code>config_p2p = 4;</code>
     */
    public static final int config_p2p_VALUE = 4;
    /**
     * <pre>
     * executable
     * </pre>
     *
     * <code>exe_app = 10;</code>
     */
    public static final int exe_app_VALUE = 10;
    /**
     * <code>exe_forge = 11;</code>
     */
    public static final int exe_forge_VALUE = 11;
    /**
     * <code>exe_dfs = 12;</code>
     */
    public static final int exe_dfs_VALUE = 12;
    /**
     * <code>exe_consensus = 13;</code>
     */
    public static final int exe_consensus_VALUE = 13;
    /**
     * <code>exe_p2p = 14;</code>
     */
    public static final int exe_p2p_VALUE = 14;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static UpgradeType valueOf(int value) {
      return forNumber(value);
    }

    public static UpgradeType forNumber(int value) {
      switch (value) {
        case 0: return config_app;
        case 1: return config_forge;
        case 2: return config_dfs;
        case 3: return config_consensus;
        case 4: return config_p2p;
        case 10: return exe_app;
        case 11: return exe_forge;
        case 12: return exe_dfs;
        case 13: return exe_consensus;
        case 14: return exe_p2p;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<UpgradeType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        UpgradeType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<UpgradeType>() {
            public UpgradeType findValueByNumber(int number) {
              return UpgradeType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return forge_abi.Enum.getDescriptor().getEnumTypes().get(6);
    }

    private static final UpgradeType[] VALUES = values();

    public static UpgradeType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private UpgradeType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:forge_abi.UpgradeType)
  }

  /**
   * Protobuf enum {@code forge_abi.UpgradeAction}
   */
  public enum UpgradeAction
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>verify = 0;</code>
     */
    verify(0),
    /**
     * <code>backup = 1;</code>
     */
    backup(1),
    /**
     * <code>replace = 2;</code>
     */
    replace(2),
    /**
     * <pre>
     * restart different part of the system
     * </pre>
     *
     * <code>restart_app = 10;</code>
     */
    restart_app(10),
    /**
     * <code>restart_dfs = 11;</code>
     */
    restart_dfs(11),
    /**
     * <code>restart_consensus = 12;</code>
     */
    restart_consensus(12),
    /**
     * <code>restart_p2p = 13;</code>
     */
    restart_p2p(13),
    /**
     * <pre>
     * restart forge will indirectly restart all component in a graceful manner
     * </pre>
     *
     * <code>restart_forge = 14;</code>
     */
    restart_forge(14),
    /**
     * <pre>
     * depend on deployment, the monitor app (e.g. systemd) shall bring the
     * process back
     * </pre>
     *
     * <code>rollback_if_fail = 30;</code>
     */
    rollback_if_fail(30),
    /**
     * <code>restart_all_if_fail = 31;</code>
     */
    restart_all_if_fail(31),
    /**
     * <code>crash_if_fail = 33;</code>
     */
    crash_if_fail(33),
    /**
     * <pre>
     * drop different intermediate files
     * </pre>
     *
     * <code>drop_address_book = 50;</code>
     */
    drop_address_book(50),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>verify = 0;</code>
     */
    public static final int verify_VALUE = 0;
    /**
     * <code>backup = 1;</code>
     */
    public static final int backup_VALUE = 1;
    /**
     * <code>replace = 2;</code>
     */
    public static final int replace_VALUE = 2;
    /**
     * <pre>
     * restart different part of the system
     * </pre>
     *
     * <code>restart_app = 10;</code>
     */
    public static final int restart_app_VALUE = 10;
    /**
     * <code>restart_dfs = 11;</code>
     */
    public static final int restart_dfs_VALUE = 11;
    /**
     * <code>restart_consensus = 12;</code>
     */
    public static final int restart_consensus_VALUE = 12;
    /**
     * <code>restart_p2p = 13;</code>
     */
    public static final int restart_p2p_VALUE = 13;
    /**
     * <pre>
     * restart forge will indirectly restart all component in a graceful manner
     * </pre>
     *
     * <code>restart_forge = 14;</code>
     */
    public static final int restart_forge_VALUE = 14;
    /**
     * <pre>
     * depend on deployment, the monitor app (e.g. systemd) shall bring the
     * process back
     * </pre>
     *
     * <code>rollback_if_fail = 30;</code>
     */
    public static final int rollback_if_fail_VALUE = 30;
    /**
     * <code>restart_all_if_fail = 31;</code>
     */
    public static final int restart_all_if_fail_VALUE = 31;
    /**
     * <code>crash_if_fail = 33;</code>
     */
    public static final int crash_if_fail_VALUE = 33;
    /**
     * <pre>
     * drop different intermediate files
     * </pre>
     *
     * <code>drop_address_book = 50;</code>
     */
    public static final int drop_address_book_VALUE = 50;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static UpgradeAction valueOf(int value) {
      return forNumber(value);
    }

    public static UpgradeAction forNumber(int value) {
      switch (value) {
        case 0: return verify;
        case 1: return backup;
        case 2: return replace;
        case 10: return restart_app;
        case 11: return restart_dfs;
        case 12: return restart_consensus;
        case 13: return restart_p2p;
        case 14: return restart_forge;
        case 30: return rollback_if_fail;
        case 31: return restart_all_if_fail;
        case 33: return crash_if_fail;
        case 50: return drop_address_book;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<UpgradeAction>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        UpgradeAction> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<UpgradeAction>() {
            public UpgradeAction findValueByNumber(int number) {
              return UpgradeAction.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return forge_abi.Enum.getDescriptor().getEnumTypes().get(7);
    }

    private static final UpgradeAction[] VALUES = values();

    public static UpgradeAction valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private UpgradeAction(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:forge_abi.UpgradeAction)
  }

  /**
   * Protobuf enum {@code forge_abi.StateType}
   */
  public enum StateType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>state_account = 0;</code>
     */
    state_account(0),
    /**
     * <code>state_asset = 1;</code>
     */
    state_asset(1),
    /**
     * <code>state_channel = 2;</code>
     */
    state_channel(2),
    /**
     * <code>state_forge = 3;</code>
     */
    state_forge(3),
    /**
     * <code>state_stake = 4;</code>
     */
    state_stake(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>state_account = 0;</code>
     */
    public static final int state_account_VALUE = 0;
    /**
     * <code>state_asset = 1;</code>
     */
    public static final int state_asset_VALUE = 1;
    /**
     * <code>state_channel = 2;</code>
     */
    public static final int state_channel_VALUE = 2;
    /**
     * <code>state_forge = 3;</code>
     */
    public static final int state_forge_VALUE = 3;
    /**
     * <code>state_stake = 4;</code>
     */
    public static final int state_stake_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static StateType valueOf(int value) {
      return forNumber(value);
    }

    public static StateType forNumber(int value) {
      switch (value) {
        case 0: return state_account;
        case 1: return state_asset;
        case 2: return state_channel;
        case 3: return state_forge;
        case 4: return state_stake;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<StateType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        StateType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<StateType>() {
            public StateType findValueByNumber(int number) {
              return StateType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return forge_abi.Enum.getDescriptor().getEnumTypes().get(8);
    }

    private static final StateType[] VALUES = values();

    public static StateType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private StateType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:forge_abi.StateType)
  }

  /**
   * Protobuf enum {@code forge_abi.StakeType}
   */
  public enum StakeType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>stake_node = 0;</code>
     */
    stake_node(0),
    /**
     * <code>stake_user = 1;</code>
     */
    stake_user(1),
    /**
     * <code>stake_asset = 2;</code>
     */
    stake_asset(2),
    /**
     * <code>stake_chain = 3;</code>
     */
    stake_chain(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>stake_node = 0;</code>
     */
    public static final int stake_node_VALUE = 0;
    /**
     * <code>stake_user = 1;</code>
     */
    public static final int stake_user_VALUE = 1;
    /**
     * <code>stake_asset = 2;</code>
     */
    public static final int stake_asset_VALUE = 2;
    /**
     * <code>stake_chain = 3;</code>
     */
    public static final int stake_chain_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static StakeType valueOf(int value) {
      return forNumber(value);
    }

    public static StakeType forNumber(int value) {
      switch (value) {
        case 0: return stake_node;
        case 1: return stake_user;
        case 2: return stake_asset;
        case 3: return stake_chain;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<StakeType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        StakeType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<StakeType>() {
            public StakeType findValueByNumber(int number) {
              return StakeType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return forge_abi.Enum.getDescriptor().getEnumTypes().get(9);
    }

    private static final StakeType[] VALUES = values();

    public static StakeType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private StakeType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:forge_abi.StakeType)
  }

  /**
   * Protobuf enum {@code forge_abi.ProtocolStatus}
   */
  public enum ProtocolStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>running = 0;</code>
     */
    running(0),
    /**
     * <code>paused = 1;</code>
     */
    paused(1),
    /**
     * <code>terminated = 2;</code>
     */
    terminated(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>running = 0;</code>
     */
    public static final int running_VALUE = 0;
    /**
     * <code>paused = 1;</code>
     */
    public static final int paused_VALUE = 1;
    /**
     * <code>terminated = 2;</code>
     */
    public static final int terminated_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ProtocolStatus valueOf(int value) {
      return forNumber(value);
    }

    public static ProtocolStatus forNumber(int value) {
      switch (value) {
        case 0: return running;
        case 1: return paused;
        case 2: return terminated;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ProtocolStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ProtocolStatus> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ProtocolStatus>() {
            public ProtocolStatus findValueByNumber(int number) {
              return ProtocolStatus.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return forge_abi.Enum.getDescriptor().getEnumTypes().get(10);
    }

    private static final ProtocolStatus[] VALUES = values();

    public static ProtocolStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ProtocolStatus(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:forge_abi.ProtocolStatus)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\nenum.proto\022\tforge_abi*\224\010\n\nStatusCode\022\006" +
      "\n\002ok\020\000\022\021\n\rinvalid_nonce\020\001\022\025\n\021invalid_sig" +
      "nature\020\002\022\030\n\024invalid_sender_state\020\003\022\032\n\026in" +
      "valid_receiver_state\020\004\022\025\n\021insufficient_d" +
      "ata\020\005\022\025\n\021insufficient_fund\020\006\022\021\n\rinvalid_" +
      "owner\020\007\022\016\n\ninvalid_tx\020\010\022\022\n\016unsupported_t" +
      "x\020\t\022\016\n\nexpired_tx\020\n\022\020\n\014too_many_txs\020\013\022\027\n" +
      "\023invalid_lock_status\020\014\022\023\n\017invalid_reques" +
      "t\020\r\022\023\n\017invalid_moniker\020\020\022\026\n\022invalid_pass" +
      "phrase\020\021\022\024\n\020invalid_multisig\020\024\022\022\n\016invali",
      "d_wallet\020\025\022\024\n\020invalid_chain_id\020\026\022\027\n\023cons" +
      "ensus_rpc_error\020\030\022\025\n\021storage_rpc_error\020\031" +
      "\022\t\n\005noent\020\032\022\024\n\020account_migrated\020\033\022\025\n\021uns" +
      "upported_stake\020\036\022\026\n\022insufficient_stake\020\037" +
      "\022\027\n\023invalid_stake_state\020 \022\030\n\024expired_wal" +
      "let_token\020!\022\022\n\016banned_unstake\020\"\022\021\n\rinval" +
      "id_asset\020#\022\023\n\017invalid_tx_size\020$\022\030\n\024inval" +
      "id_signer_state\020%\022\027\n\023invalid_forge_state" +
      "\020&\022\021\n\rexpired_asset\020\'\022\031\n\025untransferrable" +
      "_asset\020(\022\022\n\016readonly_asset\020)\022\022\n\016consumed",
      "_asset\020*\022\031\n\025invalid_deposit_value\020+\022\026\n\022e" +
      "xceed_deposit_cap\020,\022\032\n\026invalid_deposit_t" +
      "arget\020-\022\025\n\021invalid_depositor\020.\022\026\n\022invali" +
      "d_withdrawer\020/\022\024\n\020duplicate_tether\0200\022\027\n\023" +
      "invalid_expiry_date\0201\022\023\n\017invalid_deposit" +
      "\0202\022\025\n\021invalid_custodian\0203\022\016\n\tforbidden\020\223" +
      "\003\022\r\n\010internal\020\364\003\022\014\n\007timeout\020\370\003*\337\002\n\tTopic" +
      "Type\022\014\n\010transfer\020\000\022\014\n\010exchange\020\001\022\013\n\007decl" +
      "are\020\002\022\020\n\014create_asset\020\003\022\020\n\014update_asset\020" +
      "\004\022\t\n\005stake\020\005\022\023\n\017account_migrate\020\006\022\017\n\013beg",
      "in_block\020\020\022\r\n\tend_block\020\021\022\025\n\021consensus_u" +
      "pgrade\020\025\022\020\n\014declare_file\020\026\022\017\n\013sys_upgrad" +
      "e\020\027\022\017\n\013application\020\030\022\021\n\rconsume_asset\020\031\022" +
      "\010\n\004poke\020\032\022\022\n\raccount_state\020\201\001\022\020\n\013asset_s" +
      "tate\020\202\001\022\020\n\013forge_state\020\203\001\022\020\n\013stake_state" +
      "\020\204\001\022\023\n\016protocol_state\020\205\001*%\n\007KeyType\022\013\n\007e" +
      "d25519\020\000\022\r\n\tsecp256k1\020\001*f\n\010HashType\022\n\n\006k" +
      "eccak\020\000\022\010\n\004sha3\020\001\022\010\n\004sha2\020\002\022\016\n\nkeccak_38" +
      "4\020\006\022\014\n\010sha3_384\020\007\022\016\n\nkeccak_512\020\r\022\014\n\010sha" +
      "3_512\020\016*&\n\014EncodingType\022\n\n\006base16\020\000\022\n\n\006b",
      "ase58\020\001*\351\001\n\010RoleType\022\020\n\014role_account\020\000\022\r" +
      "\n\trole_node\020\001\022\017\n\013role_device\020\002\022\024\n\020role_a" +
      "pplication\020\003\022\027\n\023role_smart_contract\020\004\022\014\n" +
      "\010role_bot\020\005\022\016\n\nrole_asset\020\006\022\016\n\nrole_stak" +
      "e\020\007\022\022\n\016role_validator\020\010\022\016\n\nrole_group\020\t\022" +
      "\013\n\007role_tx\020\n\022\017\n\013role_tether\020\013\022\014\n\010role_an" +
      "y\020?*\256\001\n\013UpgradeType\022\016\n\nconfig_app\020\000\022\020\n\014c" +
      "onfig_forge\020\001\022\016\n\nconfig_dfs\020\002\022\024\n\020config_" +
      "consensus\020\003\022\016\n\nconfig_p2p\020\004\022\013\n\007exe_app\020\n" +
      "\022\r\n\texe_forge\020\013\022\013\n\007exe_dfs\020\014\022\021\n\rexe_cons",
      "ensus\020\r\022\013\n\007exe_p2p\020\016*\352\001\n\rUpgradeAction\022\n" +
      "\n\006verify\020\000\022\n\n\006backup\020\001\022\013\n\007replace\020\002\022\017\n\013r" +
      "estart_app\020\n\022\017\n\013restart_dfs\020\013\022\025\n\021restart" +
      "_consensus\020\014\022\017\n\013restart_p2p\020\r\022\021\n\rrestart" +
      "_forge\020\016\022\024\n\020rollback_if_fail\020\036\022\027\n\023restar" +
      "t_all_if_fail\020\037\022\021\n\rcrash_if_fail\020!\022\025\n\021dr" +
      "op_address_book\0202*d\n\tStateType\022\021\n\rstate_" +
      "account\020\000\022\017\n\013state_asset\020\001\022\021\n\rstate_chan" +
      "nel\020\002\022\017\n\013state_forge\020\003\022\017\n\013state_stake\020\004*" +
      "M\n\tStakeType\022\016\n\nstake_node\020\000\022\016\n\nstake_us",
      "er\020\001\022\017\n\013stake_asset\020\002\022\017\n\013stake_chain\020\003*9" +
      "\n\016ProtocolStatus\022\013\n\007running\020\000\022\n\n\006paused\020" +
      "\001\022\016\n\nterminated\020\002b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
