// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deposit_tether.proto

package forge_abi;

public final class DepositTether {
  private DepositTether() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface DepositTetherTxOrBuilder extends
      // @@protoc_insertion_point(interface_extends:forge_abi.DepositTetherTx)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The amount of token to deposit
     * </pre>
     *
     * <code>.forge_abi.BigUint value = 1;</code>
     */
    boolean hasValue();
    /**
     * <pre>
     * The amount of token to deposit
     * </pre>
     *
     * <code>.forge_abi.BigUint value = 1;</code>
     */
    forge_abi.Type.BigUint getValue();
    /**
     * <pre>
     * The amount of token to deposit
     * </pre>
     *
     * <code>.forge_abi.BigUint value = 1;</code>
     */
    forge_abi.Type.BigUintOrBuilder getValueOrBuilder();

    /**
     * <pre>
     * The amount of token to reward custodian when the deposit is withdrew.
     * </pre>
     *
     * <code>.forge_abi.BigUint commission = 2;</code>
     */
    boolean hasCommission();
    /**
     * <pre>
     * The amount of token to reward custodian when the deposit is withdrew.
     * </pre>
     *
     * <code>.forge_abi.BigUint commission = 2;</code>
     */
    forge_abi.Type.BigUint getCommission();
    /**
     * <pre>
     * The amount of token to reward custodian when the deposit is withdrew.
     * </pre>
     *
     * <code>.forge_abi.BigUint commission = 2;</code>
     */
    forge_abi.Type.BigUintOrBuilder getCommissionOrBuilder();

    /**
     * <pre>
     * The amount of toekn to reward custodian when the deposit is revoked.
     * </pre>
     *
     * <code>.forge_abi.BigUint charge = 3;</code>
     */
    boolean hasCharge();
    /**
     * <pre>
     * The amount of toekn to reward custodian when the deposit is revoked.
     * </pre>
     *
     * <code>.forge_abi.BigUint charge = 3;</code>
     */
    forge_abi.Type.BigUint getCharge();
    /**
     * <pre>
     * The amount of toekn to reward custodian when the deposit is revoked.
     * </pre>
     *
     * <code>.forge_abi.BigUint charge = 3;</code>
     */
    forge_abi.Type.BigUintOrBuilder getChargeOrBuilder();

    /**
     * <pre>
     * Target chain Id
     * </pre>
     *
     * <code>string target = 4;</code>
     */
    java.lang.String getTarget();
    /**
     * <pre>
     * Target chain Id
     * </pre>
     *
     * <code>string target = 4;</code>
     */
    com.google.protobuf.ByteString
        getTargetBytes();

    /**
     * <pre>
     * The address of the withdrawer who is the only one allowed to withdraw the tether before locktime.
     * </pre>
     *
     * <code>string withdrawer = 5;</code>
     */
    java.lang.String getWithdrawer();
    /**
     * <pre>
     * The address of the withdrawer who is the only one allowed to withdraw the tether before locktime.
     * </pre>
     *
     * <code>string withdrawer = 5;</code>
     */
    com.google.protobuf.ByteString
        getWithdrawerBytes();

    /**
     * <pre>
     * The UTC datetime before which this tether is locked. Before this time point, the depositor is not allowed to withdraw the tether, but can do it after this time point.
     * This field is to prevent the scenario where the withdrawer refuses to do the transaction after depositor deposits token and make the token hang there forever.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp locktime = 6;</code>
     */
    boolean hasLocktime();
    /**
     * <pre>
     * The UTC datetime before which this tether is locked. Before this time point, the depositor is not allowed to withdraw the tether, but can do it after this time point.
     * This field is to prevent the scenario where the withdrawer refuses to do the transaction after depositor deposits token and make the token hang there forever.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp locktime = 6;</code>
     */
    com.google.protobuf.Timestamp getLocktime();
    /**
     * <pre>
     * The UTC datetime before which this tether is locked. Before this time point, the depositor is not allowed to withdraw the tether, but can do it after this time point.
     * This field is to prevent the scenario where the withdrawer refuses to do the transaction after depositor deposits token and make the token hang there forever.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp locktime = 6;</code>
     */
    com.google.protobuf.TimestampOrBuilder getLocktimeOrBuilder();
  }
  /**
   * Protobuf type {@code forge_abi.DepositTetherTx}
   */
  public  static final class DepositTetherTx extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:forge_abi.DepositTetherTx)
      DepositTetherTxOrBuilder {
    // Use DepositTetherTx.newBuilder() to construct.
    private DepositTetherTx(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DepositTetherTx() {
      target_ = "";
      withdrawer_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private DepositTetherTx(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              forge_abi.Type.BigUint.Builder subBuilder = null;
              if (value_ != null) {
                subBuilder = value_.toBuilder();
              }
              value_ = input.readMessage(forge_abi.Type.BigUint.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(value_);
                value_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              forge_abi.Type.BigUint.Builder subBuilder = null;
              if (commission_ != null) {
                subBuilder = commission_.toBuilder();
              }
              commission_ = input.readMessage(forge_abi.Type.BigUint.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(commission_);
                commission_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              forge_abi.Type.BigUint.Builder subBuilder = null;
              if (charge_ != null) {
                subBuilder = charge_.toBuilder();
              }
              charge_ = input.readMessage(forge_abi.Type.BigUint.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(charge_);
                charge_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              target_ = s;
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              withdrawer_ = s;
              break;
            }
            case 50: {
              com.google.protobuf.Timestamp.Builder subBuilder = null;
              if (locktime_ != null) {
                subBuilder = locktime_.toBuilder();
              }
              locktime_ = input.readMessage(com.google.protobuf.Timestamp.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(locktime_);
                locktime_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return forge_abi.DepositTether.internal_static_forge_abi_DepositTetherTx_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return forge_abi.DepositTether.internal_static_forge_abi_DepositTetherTx_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              forge_abi.DepositTether.DepositTetherTx.class, forge_abi.DepositTether.DepositTetherTx.Builder.class);
    }

    public static final int VALUE_FIELD_NUMBER = 1;
    private forge_abi.Type.BigUint value_;
    /**
     * <pre>
     * The amount of token to deposit
     * </pre>
     *
     * <code>.forge_abi.BigUint value = 1;</code>
     */
    public boolean hasValue() {
      return value_ != null;
    }
    /**
     * <pre>
     * The amount of token to deposit
     * </pre>
     *
     * <code>.forge_abi.BigUint value = 1;</code>
     */
    public forge_abi.Type.BigUint getValue() {
      return value_ == null ? forge_abi.Type.BigUint.getDefaultInstance() : value_;
    }
    /**
     * <pre>
     * The amount of token to deposit
     * </pre>
     *
     * <code>.forge_abi.BigUint value = 1;</code>
     */
    public forge_abi.Type.BigUintOrBuilder getValueOrBuilder() {
      return getValue();
    }

    public static final int COMMISSION_FIELD_NUMBER = 2;
    private forge_abi.Type.BigUint commission_;
    /**
     * <pre>
     * The amount of token to reward custodian when the deposit is withdrew.
     * </pre>
     *
     * <code>.forge_abi.BigUint commission = 2;</code>
     */
    public boolean hasCommission() {
      return commission_ != null;
    }
    /**
     * <pre>
     * The amount of token to reward custodian when the deposit is withdrew.
     * </pre>
     *
     * <code>.forge_abi.BigUint commission = 2;</code>
     */
    public forge_abi.Type.BigUint getCommission() {
      return commission_ == null ? forge_abi.Type.BigUint.getDefaultInstance() : commission_;
    }
    /**
     * <pre>
     * The amount of token to reward custodian when the deposit is withdrew.
     * </pre>
     *
     * <code>.forge_abi.BigUint commission = 2;</code>
     */
    public forge_abi.Type.BigUintOrBuilder getCommissionOrBuilder() {
      return getCommission();
    }

    public static final int CHARGE_FIELD_NUMBER = 3;
    private forge_abi.Type.BigUint charge_;
    /**
     * <pre>
     * The amount of toekn to reward custodian when the deposit is revoked.
     * </pre>
     *
     * <code>.forge_abi.BigUint charge = 3;</code>
     */
    public boolean hasCharge() {
      return charge_ != null;
    }
    /**
     * <pre>
     * The amount of toekn to reward custodian when the deposit is revoked.
     * </pre>
     *
     * <code>.forge_abi.BigUint charge = 3;</code>
     */
    public forge_abi.Type.BigUint getCharge() {
      return charge_ == null ? forge_abi.Type.BigUint.getDefaultInstance() : charge_;
    }
    /**
     * <pre>
     * The amount of toekn to reward custodian when the deposit is revoked.
     * </pre>
     *
     * <code>.forge_abi.BigUint charge = 3;</code>
     */
    public forge_abi.Type.BigUintOrBuilder getChargeOrBuilder() {
      return getCharge();
    }

    public static final int TARGET_FIELD_NUMBER = 4;
    private volatile java.lang.Object target_;
    /**
     * <pre>
     * Target chain Id
     * </pre>
     *
     * <code>string target = 4;</code>
     */
    public java.lang.String getTarget() {
      java.lang.Object ref = target_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        target_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Target chain Id
     * </pre>
     *
     * <code>string target = 4;</code>
     */
    public com.google.protobuf.ByteString
        getTargetBytes() {
      java.lang.Object ref = target_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        target_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int WITHDRAWER_FIELD_NUMBER = 5;
    private volatile java.lang.Object withdrawer_;
    /**
     * <pre>
     * The address of the withdrawer who is the only one allowed to withdraw the tether before locktime.
     * </pre>
     *
     * <code>string withdrawer = 5;</code>
     */
    public java.lang.String getWithdrawer() {
      java.lang.Object ref = withdrawer_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        withdrawer_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The address of the withdrawer who is the only one allowed to withdraw the tether before locktime.
     * </pre>
     *
     * <code>string withdrawer = 5;</code>
     */
    public com.google.protobuf.ByteString
        getWithdrawerBytes() {
      java.lang.Object ref = withdrawer_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        withdrawer_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LOCKTIME_FIELD_NUMBER = 6;
    private com.google.protobuf.Timestamp locktime_;
    /**
     * <pre>
     * The UTC datetime before which this tether is locked. Before this time point, the depositor is not allowed to withdraw the tether, but can do it after this time point.
     * This field is to prevent the scenario where the withdrawer refuses to do the transaction after depositor deposits token and make the token hang there forever.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp locktime = 6;</code>
     */
    public boolean hasLocktime() {
      return locktime_ != null;
    }
    /**
     * <pre>
     * The UTC datetime before which this tether is locked. Before this time point, the depositor is not allowed to withdraw the tether, but can do it after this time point.
     * This field is to prevent the scenario where the withdrawer refuses to do the transaction after depositor deposits token and make the token hang there forever.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp locktime = 6;</code>
     */
    public com.google.protobuf.Timestamp getLocktime() {
      return locktime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : locktime_;
    }
    /**
     * <pre>
     * The UTC datetime before which this tether is locked. Before this time point, the depositor is not allowed to withdraw the tether, but can do it after this time point.
     * This field is to prevent the scenario where the withdrawer refuses to do the transaction after depositor deposits token and make the token hang there forever.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp locktime = 6;</code>
     */
    public com.google.protobuf.TimestampOrBuilder getLocktimeOrBuilder() {
      return getLocktime();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (value_ != null) {
        output.writeMessage(1, getValue());
      }
      if (commission_ != null) {
        output.writeMessage(2, getCommission());
      }
      if (charge_ != null) {
        output.writeMessage(3, getCharge());
      }
      if (!getTargetBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, target_);
      }
      if (!getWithdrawerBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, withdrawer_);
      }
      if (locktime_ != null) {
        output.writeMessage(6, getLocktime());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (value_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getValue());
      }
      if (commission_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getCommission());
      }
      if (charge_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getCharge());
      }
      if (!getTargetBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, target_);
      }
      if (!getWithdrawerBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, withdrawer_);
      }
      if (locktime_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getLocktime());
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof forge_abi.DepositTether.DepositTetherTx)) {
        return super.equals(obj);
      }
      forge_abi.DepositTether.DepositTetherTx other = (forge_abi.DepositTether.DepositTetherTx) obj;

      boolean result = true;
      result = result && (hasValue() == other.hasValue());
      if (hasValue()) {
        result = result && getValue()
            .equals(other.getValue());
      }
      result = result && (hasCommission() == other.hasCommission());
      if (hasCommission()) {
        result = result && getCommission()
            .equals(other.getCommission());
      }
      result = result && (hasCharge() == other.hasCharge());
      if (hasCharge()) {
        result = result && getCharge()
            .equals(other.getCharge());
      }
      result = result && getTarget()
          .equals(other.getTarget());
      result = result && getWithdrawer()
          .equals(other.getWithdrawer());
      result = result && (hasLocktime() == other.hasLocktime());
      if (hasLocktime()) {
        result = result && getLocktime()
            .equals(other.getLocktime());
      }
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasValue()) {
        hash = (37 * hash) + VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getValue().hashCode();
      }
      if (hasCommission()) {
        hash = (37 * hash) + COMMISSION_FIELD_NUMBER;
        hash = (53 * hash) + getCommission().hashCode();
      }
      if (hasCharge()) {
        hash = (37 * hash) + CHARGE_FIELD_NUMBER;
        hash = (53 * hash) + getCharge().hashCode();
      }
      hash = (37 * hash) + TARGET_FIELD_NUMBER;
      hash = (53 * hash) + getTarget().hashCode();
      hash = (37 * hash) + WITHDRAWER_FIELD_NUMBER;
      hash = (53 * hash) + getWithdrawer().hashCode();
      if (hasLocktime()) {
        hash = (37 * hash) + LOCKTIME_FIELD_NUMBER;
        hash = (53 * hash) + getLocktime().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static forge_abi.DepositTether.DepositTetherTx parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static forge_abi.DepositTether.DepositTetherTx parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static forge_abi.DepositTether.DepositTetherTx parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static forge_abi.DepositTether.DepositTetherTx parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static forge_abi.DepositTether.DepositTetherTx parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static forge_abi.DepositTether.DepositTetherTx parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static forge_abi.DepositTether.DepositTetherTx parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static forge_abi.DepositTether.DepositTetherTx parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static forge_abi.DepositTether.DepositTetherTx parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static forge_abi.DepositTether.DepositTetherTx parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(forge_abi.DepositTether.DepositTetherTx prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code forge_abi.DepositTetherTx}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:forge_abi.DepositTetherTx)
        forge_abi.DepositTether.DepositTetherTxOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return forge_abi.DepositTether.internal_static_forge_abi_DepositTetherTx_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return forge_abi.DepositTether.internal_static_forge_abi_DepositTetherTx_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                forge_abi.DepositTether.DepositTetherTx.class, forge_abi.DepositTether.DepositTetherTx.Builder.class);
      }

      // Construct using forge_abi.DepositTether.DepositTetherTx.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (valueBuilder_ == null) {
          value_ = null;
        } else {
          value_ = null;
          valueBuilder_ = null;
        }
        if (commissionBuilder_ == null) {
          commission_ = null;
        } else {
          commission_ = null;
          commissionBuilder_ = null;
        }
        if (chargeBuilder_ == null) {
          charge_ = null;
        } else {
          charge_ = null;
          chargeBuilder_ = null;
        }
        target_ = "";

        withdrawer_ = "";

        if (locktimeBuilder_ == null) {
          locktime_ = null;
        } else {
          locktime_ = null;
          locktimeBuilder_ = null;
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return forge_abi.DepositTether.internal_static_forge_abi_DepositTetherTx_descriptor;
      }

      public forge_abi.DepositTether.DepositTetherTx getDefaultInstanceForType() {
        return forge_abi.DepositTether.DepositTetherTx.getDefaultInstance();
      }

      public forge_abi.DepositTether.DepositTetherTx build() {
        forge_abi.DepositTether.DepositTetherTx result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public forge_abi.DepositTether.DepositTetherTx buildPartial() {
        forge_abi.DepositTether.DepositTetherTx result = new forge_abi.DepositTether.DepositTetherTx(this);
        if (valueBuilder_ == null) {
          result.value_ = value_;
        } else {
          result.value_ = valueBuilder_.build();
        }
        if (commissionBuilder_ == null) {
          result.commission_ = commission_;
        } else {
          result.commission_ = commissionBuilder_.build();
        }
        if (chargeBuilder_ == null) {
          result.charge_ = charge_;
        } else {
          result.charge_ = chargeBuilder_.build();
        }
        result.target_ = target_;
        result.withdrawer_ = withdrawer_;
        if (locktimeBuilder_ == null) {
          result.locktime_ = locktime_;
        } else {
          result.locktime_ = locktimeBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof forge_abi.DepositTether.DepositTetherTx) {
          return mergeFrom((forge_abi.DepositTether.DepositTetherTx)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(forge_abi.DepositTether.DepositTetherTx other) {
        if (other == forge_abi.DepositTether.DepositTetherTx.getDefaultInstance()) return this;
        if (other.hasValue()) {
          mergeValue(other.getValue());
        }
        if (other.hasCommission()) {
          mergeCommission(other.getCommission());
        }
        if (other.hasCharge()) {
          mergeCharge(other.getCharge());
        }
        if (!other.getTarget().isEmpty()) {
          target_ = other.target_;
          onChanged();
        }
        if (!other.getWithdrawer().isEmpty()) {
          withdrawer_ = other.withdrawer_;
          onChanged();
        }
        if (other.hasLocktime()) {
          mergeLocktime(other.getLocktime());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        forge_abi.DepositTether.DepositTetherTx parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (forge_abi.DepositTether.DepositTetherTx) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private forge_abi.Type.BigUint value_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          forge_abi.Type.BigUint, forge_abi.Type.BigUint.Builder, forge_abi.Type.BigUintOrBuilder> valueBuilder_;
      /**
       * <pre>
       * The amount of token to deposit
       * </pre>
       *
       * <code>.forge_abi.BigUint value = 1;</code>
       */
      public boolean hasValue() {
        return valueBuilder_ != null || value_ != null;
      }
      /**
       * <pre>
       * The amount of token to deposit
       * </pre>
       *
       * <code>.forge_abi.BigUint value = 1;</code>
       */
      public forge_abi.Type.BigUint getValue() {
        if (valueBuilder_ == null) {
          return value_ == null ? forge_abi.Type.BigUint.getDefaultInstance() : value_;
        } else {
          return valueBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The amount of token to deposit
       * </pre>
       *
       * <code>.forge_abi.BigUint value = 1;</code>
       */
      public Builder setValue(forge_abi.Type.BigUint value) {
        if (valueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          value_ = value;
          onChanged();
        } else {
          valueBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The amount of token to deposit
       * </pre>
       *
       * <code>.forge_abi.BigUint value = 1;</code>
       */
      public Builder setValue(
          forge_abi.Type.BigUint.Builder builderForValue) {
        if (valueBuilder_ == null) {
          value_ = builderForValue.build();
          onChanged();
        } else {
          valueBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The amount of token to deposit
       * </pre>
       *
       * <code>.forge_abi.BigUint value = 1;</code>
       */
      public Builder mergeValue(forge_abi.Type.BigUint value) {
        if (valueBuilder_ == null) {
          if (value_ != null) {
            value_ =
              forge_abi.Type.BigUint.newBuilder(value_).mergeFrom(value).buildPartial();
          } else {
            value_ = value;
          }
          onChanged();
        } else {
          valueBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The amount of token to deposit
       * </pre>
       *
       * <code>.forge_abi.BigUint value = 1;</code>
       */
      public Builder clearValue() {
        if (valueBuilder_ == null) {
          value_ = null;
          onChanged();
        } else {
          value_ = null;
          valueBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The amount of token to deposit
       * </pre>
       *
       * <code>.forge_abi.BigUint value = 1;</code>
       */
      public forge_abi.Type.BigUint.Builder getValueBuilder() {
        
        onChanged();
        return getValueFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The amount of token to deposit
       * </pre>
       *
       * <code>.forge_abi.BigUint value = 1;</code>
       */
      public forge_abi.Type.BigUintOrBuilder getValueOrBuilder() {
        if (valueBuilder_ != null) {
          return valueBuilder_.getMessageOrBuilder();
        } else {
          return value_ == null ?
              forge_abi.Type.BigUint.getDefaultInstance() : value_;
        }
      }
      /**
       * <pre>
       * The amount of token to deposit
       * </pre>
       *
       * <code>.forge_abi.BigUint value = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          forge_abi.Type.BigUint, forge_abi.Type.BigUint.Builder, forge_abi.Type.BigUintOrBuilder> 
          getValueFieldBuilder() {
        if (valueBuilder_ == null) {
          valueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              forge_abi.Type.BigUint, forge_abi.Type.BigUint.Builder, forge_abi.Type.BigUintOrBuilder>(
                  getValue(),
                  getParentForChildren(),
                  isClean());
          value_ = null;
        }
        return valueBuilder_;
      }

      private forge_abi.Type.BigUint commission_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          forge_abi.Type.BigUint, forge_abi.Type.BigUint.Builder, forge_abi.Type.BigUintOrBuilder> commissionBuilder_;
      /**
       * <pre>
       * The amount of token to reward custodian when the deposit is withdrew.
       * </pre>
       *
       * <code>.forge_abi.BigUint commission = 2;</code>
       */
      public boolean hasCommission() {
        return commissionBuilder_ != null || commission_ != null;
      }
      /**
       * <pre>
       * The amount of token to reward custodian when the deposit is withdrew.
       * </pre>
       *
       * <code>.forge_abi.BigUint commission = 2;</code>
       */
      public forge_abi.Type.BigUint getCommission() {
        if (commissionBuilder_ == null) {
          return commission_ == null ? forge_abi.Type.BigUint.getDefaultInstance() : commission_;
        } else {
          return commissionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The amount of token to reward custodian when the deposit is withdrew.
       * </pre>
       *
       * <code>.forge_abi.BigUint commission = 2;</code>
       */
      public Builder setCommission(forge_abi.Type.BigUint value) {
        if (commissionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          commission_ = value;
          onChanged();
        } else {
          commissionBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The amount of token to reward custodian when the deposit is withdrew.
       * </pre>
       *
       * <code>.forge_abi.BigUint commission = 2;</code>
       */
      public Builder setCommission(
          forge_abi.Type.BigUint.Builder builderForValue) {
        if (commissionBuilder_ == null) {
          commission_ = builderForValue.build();
          onChanged();
        } else {
          commissionBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The amount of token to reward custodian when the deposit is withdrew.
       * </pre>
       *
       * <code>.forge_abi.BigUint commission = 2;</code>
       */
      public Builder mergeCommission(forge_abi.Type.BigUint value) {
        if (commissionBuilder_ == null) {
          if (commission_ != null) {
            commission_ =
              forge_abi.Type.BigUint.newBuilder(commission_).mergeFrom(value).buildPartial();
          } else {
            commission_ = value;
          }
          onChanged();
        } else {
          commissionBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The amount of token to reward custodian when the deposit is withdrew.
       * </pre>
       *
       * <code>.forge_abi.BigUint commission = 2;</code>
       */
      public Builder clearCommission() {
        if (commissionBuilder_ == null) {
          commission_ = null;
          onChanged();
        } else {
          commission_ = null;
          commissionBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The amount of token to reward custodian when the deposit is withdrew.
       * </pre>
       *
       * <code>.forge_abi.BigUint commission = 2;</code>
       */
      public forge_abi.Type.BigUint.Builder getCommissionBuilder() {
        
        onChanged();
        return getCommissionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The amount of token to reward custodian when the deposit is withdrew.
       * </pre>
       *
       * <code>.forge_abi.BigUint commission = 2;</code>
       */
      public forge_abi.Type.BigUintOrBuilder getCommissionOrBuilder() {
        if (commissionBuilder_ != null) {
          return commissionBuilder_.getMessageOrBuilder();
        } else {
          return commission_ == null ?
              forge_abi.Type.BigUint.getDefaultInstance() : commission_;
        }
      }
      /**
       * <pre>
       * The amount of token to reward custodian when the deposit is withdrew.
       * </pre>
       *
       * <code>.forge_abi.BigUint commission = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          forge_abi.Type.BigUint, forge_abi.Type.BigUint.Builder, forge_abi.Type.BigUintOrBuilder> 
          getCommissionFieldBuilder() {
        if (commissionBuilder_ == null) {
          commissionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              forge_abi.Type.BigUint, forge_abi.Type.BigUint.Builder, forge_abi.Type.BigUintOrBuilder>(
                  getCommission(),
                  getParentForChildren(),
                  isClean());
          commission_ = null;
        }
        return commissionBuilder_;
      }

      private forge_abi.Type.BigUint charge_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          forge_abi.Type.BigUint, forge_abi.Type.BigUint.Builder, forge_abi.Type.BigUintOrBuilder> chargeBuilder_;
      /**
       * <pre>
       * The amount of toekn to reward custodian when the deposit is revoked.
       * </pre>
       *
       * <code>.forge_abi.BigUint charge = 3;</code>
       */
      public boolean hasCharge() {
        return chargeBuilder_ != null || charge_ != null;
      }
      /**
       * <pre>
       * The amount of toekn to reward custodian when the deposit is revoked.
       * </pre>
       *
       * <code>.forge_abi.BigUint charge = 3;</code>
       */
      public forge_abi.Type.BigUint getCharge() {
        if (chargeBuilder_ == null) {
          return charge_ == null ? forge_abi.Type.BigUint.getDefaultInstance() : charge_;
        } else {
          return chargeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The amount of toekn to reward custodian when the deposit is revoked.
       * </pre>
       *
       * <code>.forge_abi.BigUint charge = 3;</code>
       */
      public Builder setCharge(forge_abi.Type.BigUint value) {
        if (chargeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          charge_ = value;
          onChanged();
        } else {
          chargeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The amount of toekn to reward custodian when the deposit is revoked.
       * </pre>
       *
       * <code>.forge_abi.BigUint charge = 3;</code>
       */
      public Builder setCharge(
          forge_abi.Type.BigUint.Builder builderForValue) {
        if (chargeBuilder_ == null) {
          charge_ = builderForValue.build();
          onChanged();
        } else {
          chargeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The amount of toekn to reward custodian when the deposit is revoked.
       * </pre>
       *
       * <code>.forge_abi.BigUint charge = 3;</code>
       */
      public Builder mergeCharge(forge_abi.Type.BigUint value) {
        if (chargeBuilder_ == null) {
          if (charge_ != null) {
            charge_ =
              forge_abi.Type.BigUint.newBuilder(charge_).mergeFrom(value).buildPartial();
          } else {
            charge_ = value;
          }
          onChanged();
        } else {
          chargeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The amount of toekn to reward custodian when the deposit is revoked.
       * </pre>
       *
       * <code>.forge_abi.BigUint charge = 3;</code>
       */
      public Builder clearCharge() {
        if (chargeBuilder_ == null) {
          charge_ = null;
          onChanged();
        } else {
          charge_ = null;
          chargeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The amount of toekn to reward custodian when the deposit is revoked.
       * </pre>
       *
       * <code>.forge_abi.BigUint charge = 3;</code>
       */
      public forge_abi.Type.BigUint.Builder getChargeBuilder() {
        
        onChanged();
        return getChargeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The amount of toekn to reward custodian when the deposit is revoked.
       * </pre>
       *
       * <code>.forge_abi.BigUint charge = 3;</code>
       */
      public forge_abi.Type.BigUintOrBuilder getChargeOrBuilder() {
        if (chargeBuilder_ != null) {
          return chargeBuilder_.getMessageOrBuilder();
        } else {
          return charge_ == null ?
              forge_abi.Type.BigUint.getDefaultInstance() : charge_;
        }
      }
      /**
       * <pre>
       * The amount of toekn to reward custodian when the deposit is revoked.
       * </pre>
       *
       * <code>.forge_abi.BigUint charge = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          forge_abi.Type.BigUint, forge_abi.Type.BigUint.Builder, forge_abi.Type.BigUintOrBuilder> 
          getChargeFieldBuilder() {
        if (chargeBuilder_ == null) {
          chargeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              forge_abi.Type.BigUint, forge_abi.Type.BigUint.Builder, forge_abi.Type.BigUintOrBuilder>(
                  getCharge(),
                  getParentForChildren(),
                  isClean());
          charge_ = null;
        }
        return chargeBuilder_;
      }

      private java.lang.Object target_ = "";
      /**
       * <pre>
       * Target chain Id
       * </pre>
       *
       * <code>string target = 4;</code>
       */
      public java.lang.String getTarget() {
        java.lang.Object ref = target_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          target_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Target chain Id
       * </pre>
       *
       * <code>string target = 4;</code>
       */
      public com.google.protobuf.ByteString
          getTargetBytes() {
        java.lang.Object ref = target_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          target_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Target chain Id
       * </pre>
       *
       * <code>string target = 4;</code>
       */
      public Builder setTarget(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        target_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Target chain Id
       * </pre>
       *
       * <code>string target = 4;</code>
       */
      public Builder clearTarget() {
        
        target_ = getDefaultInstance().getTarget();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Target chain Id
       * </pre>
       *
       * <code>string target = 4;</code>
       */
      public Builder setTargetBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        target_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object withdrawer_ = "";
      /**
       * <pre>
       * The address of the withdrawer who is the only one allowed to withdraw the tether before locktime.
       * </pre>
       *
       * <code>string withdrawer = 5;</code>
       */
      public java.lang.String getWithdrawer() {
        java.lang.Object ref = withdrawer_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          withdrawer_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The address of the withdrawer who is the only one allowed to withdraw the tether before locktime.
       * </pre>
       *
       * <code>string withdrawer = 5;</code>
       */
      public com.google.protobuf.ByteString
          getWithdrawerBytes() {
        java.lang.Object ref = withdrawer_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          withdrawer_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The address of the withdrawer who is the only one allowed to withdraw the tether before locktime.
       * </pre>
       *
       * <code>string withdrawer = 5;</code>
       */
      public Builder setWithdrawer(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        withdrawer_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The address of the withdrawer who is the only one allowed to withdraw the tether before locktime.
       * </pre>
       *
       * <code>string withdrawer = 5;</code>
       */
      public Builder clearWithdrawer() {
        
        withdrawer_ = getDefaultInstance().getWithdrawer();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The address of the withdrawer who is the only one allowed to withdraw the tether before locktime.
       * </pre>
       *
       * <code>string withdrawer = 5;</code>
       */
      public Builder setWithdrawerBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        withdrawer_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.Timestamp locktime_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> locktimeBuilder_;
      /**
       * <pre>
       * The UTC datetime before which this tether is locked. Before this time point, the depositor is not allowed to withdraw the tether, but can do it after this time point.
       * This field is to prevent the scenario where the withdrawer refuses to do the transaction after depositor deposits token and make the token hang there forever.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp locktime = 6;</code>
       */
      public boolean hasLocktime() {
        return locktimeBuilder_ != null || locktime_ != null;
      }
      /**
       * <pre>
       * The UTC datetime before which this tether is locked. Before this time point, the depositor is not allowed to withdraw the tether, but can do it after this time point.
       * This field is to prevent the scenario where the withdrawer refuses to do the transaction after depositor deposits token and make the token hang there forever.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp locktime = 6;</code>
       */
      public com.google.protobuf.Timestamp getLocktime() {
        if (locktimeBuilder_ == null) {
          return locktime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : locktime_;
        } else {
          return locktimeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The UTC datetime before which this tether is locked. Before this time point, the depositor is not allowed to withdraw the tether, but can do it after this time point.
       * This field is to prevent the scenario where the withdrawer refuses to do the transaction after depositor deposits token and make the token hang there forever.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp locktime = 6;</code>
       */
      public Builder setLocktime(com.google.protobuf.Timestamp value) {
        if (locktimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          locktime_ = value;
          onChanged();
        } else {
          locktimeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The UTC datetime before which this tether is locked. Before this time point, the depositor is not allowed to withdraw the tether, but can do it after this time point.
       * This field is to prevent the scenario where the withdrawer refuses to do the transaction after depositor deposits token and make the token hang there forever.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp locktime = 6;</code>
       */
      public Builder setLocktime(
          com.google.protobuf.Timestamp.Builder builderForValue) {
        if (locktimeBuilder_ == null) {
          locktime_ = builderForValue.build();
          onChanged();
        } else {
          locktimeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The UTC datetime before which this tether is locked. Before this time point, the depositor is not allowed to withdraw the tether, but can do it after this time point.
       * This field is to prevent the scenario where the withdrawer refuses to do the transaction after depositor deposits token and make the token hang there forever.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp locktime = 6;</code>
       */
      public Builder mergeLocktime(com.google.protobuf.Timestamp value) {
        if (locktimeBuilder_ == null) {
          if (locktime_ != null) {
            locktime_ =
              com.google.protobuf.Timestamp.newBuilder(locktime_).mergeFrom(value).buildPartial();
          } else {
            locktime_ = value;
          }
          onChanged();
        } else {
          locktimeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The UTC datetime before which this tether is locked. Before this time point, the depositor is not allowed to withdraw the tether, but can do it after this time point.
       * This field is to prevent the scenario where the withdrawer refuses to do the transaction after depositor deposits token and make the token hang there forever.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp locktime = 6;</code>
       */
      public Builder clearLocktime() {
        if (locktimeBuilder_ == null) {
          locktime_ = null;
          onChanged();
        } else {
          locktime_ = null;
          locktimeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The UTC datetime before which this tether is locked. Before this time point, the depositor is not allowed to withdraw the tether, but can do it after this time point.
       * This field is to prevent the scenario where the withdrawer refuses to do the transaction after depositor deposits token and make the token hang there forever.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp locktime = 6;</code>
       */
      public com.google.protobuf.Timestamp.Builder getLocktimeBuilder() {
        
        onChanged();
        return getLocktimeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The UTC datetime before which this tether is locked. Before this time point, the depositor is not allowed to withdraw the tether, but can do it after this time point.
       * This field is to prevent the scenario where the withdrawer refuses to do the transaction after depositor deposits token and make the token hang there forever.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp locktime = 6;</code>
       */
      public com.google.protobuf.TimestampOrBuilder getLocktimeOrBuilder() {
        if (locktimeBuilder_ != null) {
          return locktimeBuilder_.getMessageOrBuilder();
        } else {
          return locktime_ == null ?
              com.google.protobuf.Timestamp.getDefaultInstance() : locktime_;
        }
      }
      /**
       * <pre>
       * The UTC datetime before which this tether is locked. Before this time point, the depositor is not allowed to withdraw the tether, but can do it after this time point.
       * This field is to prevent the scenario where the withdrawer refuses to do the transaction after depositor deposits token and make the token hang there forever.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp locktime = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
          getLocktimeFieldBuilder() {
        if (locktimeBuilder_ == null) {
          locktimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                  getLocktime(),
                  getParentForChildren(),
                  isClean());
          locktime_ = null;
        }
        return locktimeBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:forge_abi.DepositTetherTx)
    }

    // @@protoc_insertion_point(class_scope:forge_abi.DepositTetherTx)
    private static final forge_abi.DepositTether.DepositTetherTx DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new forge_abi.DepositTether.DepositTetherTx();
    }

    public static forge_abi.DepositTether.DepositTetherTx getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DepositTetherTx>
        PARSER = new com.google.protobuf.AbstractParser<DepositTetherTx>() {
      public DepositTetherTx parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new DepositTetherTx(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DepositTetherTx> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DepositTetherTx> getParserForType() {
      return PARSER;
    }

    public forge_abi.DepositTether.DepositTetherTx getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_forge_abi_DepositTetherTx_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_forge_abi_DepositTetherTx_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\024deposit_tether.proto\022\tforge_abi\032\037googl" +
      "e/protobuf/timestamp.proto\032\ntype.proto\"\322" +
      "\001\n\017DepositTetherTx\022!\n\005value\030\001 \001(\0132\022.forg" +
      "e_abi.BigUint\022&\n\ncommission\030\002 \001(\0132\022.forg" +
      "e_abi.BigUint\022\"\n\006charge\030\003 \001(\0132\022.forge_ab" +
      "i.BigUint\022\016\n\006target\030\004 \001(\t\022\022\n\nwithdrawer\030" +
      "\005 \001(\t\022,\n\010locktime\030\006 \001(\0132\032.google.protobu" +
      "f.Timestampb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.TimestampProto.getDescriptor(),
          forge_abi.Type.getDescriptor(),
        }, assigner);
    internal_static_forge_abi_DepositTetherTx_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_forge_abi_DepositTetherTx_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_forge_abi_DepositTetherTx_descriptor,
        new java.lang.String[] { "Value", "Commission", "Charge", "Target", "Withdrawer", "Locktime", });
    com.google.protobuf.TimestampProto.getDescriptor();
    forge_abi.Type.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
