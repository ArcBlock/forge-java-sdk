plugins {
  id 'java'
}


apply plugin: 'com.google.protobuf'



group 'io.arcblock.forge'
version = project.file("../version").readLines().first()

sourceCompatibility = 1.8

repositories {
  mavenCentral()
}


protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:3.2.0"
  }
  plugins {
    grpc {
      artifact = 'io.grpc:protoc-gen-grpc-java:1.4.0'
    }
  }
  generatedFilesBaseDir = "src"

  generateProtoTasks {
    all()*.plugins {
      grpc {
        outputSubDir = "java"
      }
    }
  }

}


dependencies {
  compile 'io.grpc:grpc-netty:1.4.0'
  compile 'io.grpc:grpc-protobuf:1.4.0'
  compile 'io.grpc:grpc-stub:1.4.0'
  compile 'com.google.protobuf:protobuf-java:3.6.1'
  testCompile group: 'junit', name: 'junit', version: '4.12'
}


artifacts {
  archives jar
//  archives sourceJar
//  archives javadocJar
}


signing {
  sign configurations.archives
}

publishing {
  repositories {
    maven {
      def releaseUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"//"s3://android-docs.arcblock.io.s3.amazonaws.com/release"
      def snapshotUrl = "https://oss.sonatype.org/content/repositories/snapshots"
      if(rootProject.version.toString().toUpperCase().endsWith("SNAPSHOT")){
        url snapshotUrl
      }else {
        url releaseUrl
      }
      credentials {
        username sonatypeUsername
        password sonatypePassword
      }
    }
  }

  publications {
    mavenJava(MavenPublication) {
      customizePom(pom)
      groupId rootProject.group
      artifactId "protobuf"
      version rootProject.version
      from components.java
      // create the sign pom artifact
      pom.withXml {
        def pomFile = file("${project.buildDir}/generated-pom.xml")
        writeTo(pomFile)
        def pomAscFile = signing.sign(pomFile).signatureFiles[0]
        artifact(pomAscFile) {
          classifier = null
          extension = 'pom.asc'
        }
      }
// create the signed artifacts
      project.tasks.signArchives.signatureFiles.each {
        artifact(it) {
          def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
          if (matcher.find()) {
            classifier = matcher.group(1)
          } else {
            classifier = null
          }
          extension = 'jar.asc'
        }
      }

    }
  }
}
def customizePom(pom) {
  pom.withXml {
    def root = asNode()

    // eliminate test-scoped dependencies (no need in maven central POMs)
//    root.dependencies.removeAll { dep ->
//      dep.scope == "test"
//    }

    // add all items necessary for maven central publication
    root.children().last() + {
      resolveStrategy = Closure.DELEGATE_FIRST

      description 'Serialize and Deserialize Json-LD into Java entities'
      name 'Forge Java SDK '
      url 'https://github.com/Arcblock/Forge-java-sdk'
      organization {
        name 'Arcblock.io'
        url 'https://github.com/Arcblock'
      }
      issueManagement {
        system 'GitHub'
        url 'https://github.com/Arcblock/Forge-java-sdk/issues'
      }
      licenses {
        license {
          name 'Apache License 2.0'
          url 'https://github.com/ArcBlock/forge-java-sdk/blob/master/LICENSE'
          distribution 'repo'
        }
      }
      scm {
        url 'https://github.com/ArcBlock/forge-java-sdk'
        connection 'scm:git:git://github.com/ArcBlock/forge-java-sdk.git'
        developerConnection 'scm:git:ssh://git@github.com:ArcBlock/forge-java-sdk.git'
      }
      developers {
        developer {
          name 'Arcblock'
        }
      }
    }
  }
}


model {
  tasks.generatePomFileForMavenJavaPublication {
    destination = file("$buildDir/generated-pom.xml")
  }
  tasks.publishMavenJavaPublicationToMavenLocal {
    dependsOn project.tasks.signArchives
  }
  tasks.publishMavenJavaPublicationToMavenRepository {
    dependsOn project.tasks.signArchives
  }
}




